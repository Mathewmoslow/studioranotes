// StudiOra Notes Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============= User & Auth =============
model User {
  id       String @id @default(cuid())
  email    String @unique
  name     String?
  image    String?

  // Subscription info
  subscription   SubscriptionTier @default(FREE)
  subscriptionId String?

  // Settings
  onboardingCompleted Boolean @default(false)
  preferences         Json?   // UserPreferences object

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  universities  UserUniversity[]
  canvasTokens  CanvasToken[]
  courses       Course[]
  tasks         Task[]
  notes         Note[]
  studyBlocks   StudyBlock[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model University {
  id        String @id @default(cuid())
  name      String
  domain    String @unique
  canvasUrl String?

  users UserUniversity[]

  @@map("universities")
}

model UserUniversity {
  id           String     @id @default(cuid())
  userId       String
  universityId String
  isPrimary    Boolean    @default(false)

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@unique([userId, universityId])
  @@map("user_universities")
}

model CanvasToken {
  id           String    @id @default(cuid())
  userId       String
  universityId String?
  token        String
  domain       String
  expiresAt    DateTime?
  lastSync     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("canvas_tokens")
}

// ============= Courses =============
model Course {
  id          String  @id @default(cuid())
  userId      String
  code        String  // e.g., "NURS320"
  name        String
  instructor  String?
  description String?
  color       String  @default("#667eea")
  creditHours Int?

  // Schedule
  semester String?
  year     Int?
  schedule Json? // RecurringEvent[]

  // Progress
  progress           Int     @default(0)
  completedModules   String[] // Module IDs

  // Canvas integration
  canvasId           String?
  canvasCourseCode   String?
  canvasSyncEnabled  Boolean @default(false)
  lastCanvasSync     DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  notes       Note[]
  studyBlocks StudyBlock[]
  modules     Module[]

  @@map("courses")
}

model Module {
  id       String @id @default(cuid())
  courseId String
  number   Int
  title    String
  description String?
  weekNumber  Int?
  topics      String[]
  learningObjectives String[]
  completed   Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  notes  Note[]

  @@map("modules")
}

// ============= Tasks & Assignments =============
model Task {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  title       String
  description String?
  type        TaskType @default(ASSIGNMENT)

  // Timing
  dueDate     DateTime
  startDate   DateTime?
  completedAt DateTime?

  // Scheduling
  estimatedHours Int     @default(2)
  actualHours    Float?
  complexity     Int     @default(3) // 1-5 scale
  priority       Priority @default(MEDIUM)

  // Settings
  isHardDeadline Boolean @default(true)
  canSplit       Boolean @default(true)
  preferredTimes String[] // TimePreference enum values
  bufferDays     Int?

  // Status
  status   TaskStatus @default(NOT_STARTED)
  progress Int        @default(0)

  // Canvas integration
  canvasId           String?
  canvasSubmissionId String?
  grade              Float?
  feedback           String?

  // AI features
  autoGenerateNotes     Boolean @default(false)
  noteGenerationPrompts String[]
  studyMaterialsGenerated Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  studyBlocks  StudyBlock[]
  relatedNotes Note[]       @relation("TaskNotes")

  @@map("tasks")
}

// ============= Study Blocks =============
model StudyBlock {
  id       String @id @default(cuid())
  userId   String
  taskId   String?
  courseId String?

  // Timing
  startTime DateTime
  endTime   DateTime
  duration  Int // minutes

  // Type and content
  type        StudyBlockType @default(READING)
  title       String
  description String?

  // Scheduling
  energyLevel  EnergyLevel @default(MEDIUM)
  canReschedule Boolean    @default(true)
  locked       Boolean    @default(false)

  // Progress
  status         BlockStatus @default(SCHEDULED)
  completionRate Int         @default(0)
  notesCreated   String[] // Note IDs

  // AI suggestions
  suggestedContent Json? // SuggestedContent object

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  task         Task?          @relation(fields: [taskId], references: [id])
  course       Course?        @relation(fields: [courseId], references: [id])
  timerSessions TimerSession[]

  @@map("study_blocks")
}

model TimerSession {
  id          String @id @default(cuid())
  blockId     String
  startTime   DateTime
  endTime     DateTime?
  duration    Int // minutes
  completed   Boolean @default(false)
  breaks      Int     @default(0)

  studyBlock StudyBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@map("timer_sessions")
}

// ============= Notes =============
model Note {
  id       String @id @default(cuid())
  userId   String
  courseId String
  moduleId String?
  slug     String @unique

  // Content
  title    String
  content  String // Main content
  markdown String // Markdown source
  html     String? // Rendered HTML
  summary  String?

  // Organization
  tags     String[]
  category NoteCategory @default(OTHER)
  type     NoteType     @default(COMPREHENSIVE)

  // AI features
  aiGenerated      Boolean @default(false)
  generationPrompt String?
  style            NoteStyle @default(COMPREHENSIVE)

  // Study features
  starred              Boolean @default(false)
  archived             Boolean @default(false)
  reviewCount          Int     @default(0)
  comprehensionScore   Int? // 1-100

  // Relations
  relatedNotes String[] // Note IDs
  linkedTasks  Task[]   @relation("TaskNotes")

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastAccessedAt DateTime?

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id])

  @@map("notes")
}

// ============= Analytics =============
model StudyAnalytics {
  id     String @id @default(cuid())
  userId String
  period AnalyticsPeriod
  date   DateTime

  // Time metrics
  totalStudyTime       Int @default(0) // minutes
  averageSessionLength Int @default(0)
  longestStreak        Int @default(0) // days
  currentStreak        Int @default(0)

  // Productivity
  tasksCompleted  Int   @default(0)
  tasksOverdue    Int   @default(0)
  completionRate  Float @default(0)

  // Academic
  averageGrade     Float?
  gradeImprovement Float?

  // Content
  notesCreated     Int @default(0)
  notesReviewed    Int @default(0)
  conceptsMastered Int @default(0)

  // Patterns
  mostProductiveTime String?
  mostProductiveDay  String?
  studyPatterns      Json? // StudyPattern[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, period, date])
  @@map("study_analytics")
}

// ============= Enums =============
enum SubscriptionTier {
  FREE
  PREMIUM
  PRO
}

enum TaskType {
  ASSIGNMENT
  EXAM
  QUIZ
  PROJECT
  PRESENTATION
  LAB
  CLINICAL
  READING
  DISCUSSION
  PAPER
  OTHER
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum StudyBlockType {
  READING
  NOTE_TAKING
  PRACTICE
  REVIEW
  WRITING
  RESEARCH
  GROUP_STUDY
  BREAK
}

enum BlockStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  SKIPPED
  RESCHEDULED
}

enum EnergyLevel {
  LOW
  MEDIUM
  HIGH
}

enum NoteCategory {
  LECTURE
  TEXTBOOK
  CLINICAL
  LAB
  STUDY_GUIDE
  SUMMARY
  CONCEPT
  OTHER
}

enum NoteType {
  COMPREHENSIVE
  OUTLINE
  SUMMARY
  FLASHCARDS
  CONCEPT_MAP
  QA
}

enum NoteStyle {
  COMPREHENSIVE
  CONCISE
  GUIDED
  FLEXIBLE
  EXPLORATORY
}

enum AnalyticsPeriod {
  DAY
  WEEK
  MONTH
  SEMESTER
}